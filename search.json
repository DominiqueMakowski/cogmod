[{"path":"https://github.com/DominiqueMakowski/cogmod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dominique Makowski. Author, maintainer.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Makowski D (2025). cogmod: Cognitive Models Subjective Scales Decision Making Tasks R. R package version 0.0.12, https://github.com/DominiqueMakowski/cogmod.","code":"@Manual{,   title = {cogmod: Cognitive Models for Subjective Scales and Decision Making Tasks in R},   author = {Dominique Makowski},   year = {2025},   note = {R package version 0.0.12},   url = {https://github.com/DominiqueMakowski/cogmod}, }"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"cogmod","dir":"","previous_headings":"","what":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"Cognitive Models Subjective Scales Decision Making Tasks R","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"package much totally exploratory - currently made needs. ’s meant stable robust stage. Use risks. suggestions improvement, please get touch! interested Sequential Sampling Models, see amazing Julia package See also attempt creating tutorials","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\")  remotes::install_github(\"DominiqueMakowski/cogmod\")"},{"path":[]},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"choco-model","dir":"","previous_headings":"Available Distributions","what":"CHOCO Model","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"Choice-Confidence (CHOCO) model useful model data subjective ratings, Likert-type analog scales, left right side correspond different processes higher order categorical responses (e.g., “disagree” vs. “agree”, “true” vs. “false”). can used jointly model choice (left right) confidence (degree left right).","code":"library(ggplot2) library(patchwork) library(cogmod)  # Simulate data using rchoco() with two parameter sets df1 <- rchoco(n = 5000, conf = 0.5, confleft = 0.4, prec = 3, pex = 0.1) df2 <- rchoco(n = 5000, conf = 0.7, confleft = 0.6, prec = 5, pex = 0.05)  # Combine data into a single data frame df <- data.frame(   value = c(df1, df2),   group = rep(c(     \"conf = 0.5, confleft = 0.4, prec = 3, pex = 0.1\",     \"conf = 0.7, confleft = 0.6, prec = 5, pex = 0.05\"   ), each = 5000) )  # Create the histogram ggplot(df, aes(x = value, fill = group)) +   geom_histogram(alpha = 0.8, position = \"identity\", bins = 50) +   labs(title = \"CHOCO Distribution\", x = \"Value\", y = \"\", fill = \"Parameters\") +   theme_minimal() +   scale_fill_manual(values = c(\"#9C27B0\", \"#FF9800\"))"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"lnr-model","dir":"","previous_headings":"Available Distributions","what":"LNR Model","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"Log-Normal Race (LNR) model useful modeling reaction times errors decision-making tasks. model assumes accumulator draws value LogNormal distribution (shifted non-decision time τ). winning accumulator (minimum draw) determines observed reaction time choice.","code":"# Simulate data using rlnr() lnr_data <- rlnr(n = 5000, mu = 1, mudelta = 0.5, sigmazero = 1, sigmadelta = -0.5, ndt = 0.2)  # Create histograms for each choice ggplot(lnr_data, aes(x = rt, fill = factor(response))) +   geom_histogram(alpha = 0.8, position = \"identity\", bins = 50) +   labs(title = \"LogNormal Race Model\", x = \"Reaction Time\", y = \"Frequency\", fill = \"Choice\") +   theme_minimal() +   scale_fill_manual(values = c(\"#4CAF50\", \"#FF5722\"))"},{"path":[]},{"path":[]},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"simulate-data","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"Simulate Data","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"","code":"options(mc.cores = parallel::detectCores() - 2)  library(easystats) library(brms) library(cmdstanr)  df <- data.frame() for(x in seq(0.1, 1, by = 0.1)) {   df <- data.frame(x = x,                    score = rchoco(n = 100, p = 0.4 + x / 2, conf = 0.3 + x / 3,                                    confleft = -x, pex = 0.03, bex = 0.6, pmid = 0)) |>      rbind(df) }  df |>   ggplot(aes(x = score, y = after_stat(density))) +   geom_histogram(bins = 100, fill = \"#2196F3\") +   labs(title = \"Rating Distribution\", x = \"Score\", y = \"Density\") +   theme_minimal()"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"zoib-model","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"ZOIB Model","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"Zero-One Inflated Beta (ZOIB) model assumes data can modeled mixture two logistic regression processes boundary values (0 1) beta regression process continuous proportions -.","code":"f <- bf(   score ~ x,   phi ~ x,   zoi ~ x,   coi ~ x )  m_zoib <- brm(f,   data = df, family = zero_one_inflated_beta(), init = 0,   chains = 4, iter = 500, backend = \"cmdstanr\" )  m_zoib <- brms::add_criterion(m_zoib, \"loo\")  # For later model comparison  saveRDS(m_zoib, file = \"man/figures/m_zoib.rds\")"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"xbx-model","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"XBX Model","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"Kosmidis & Zeileis (2024) introduce generalization classic beta regression model extended support [0, 1]. Specifically, extended-support beta distribution (xbeta) leverages underlying symmetric four-parameter beta distribution exceedence parameter nu obtain support [-nu, 1 + nu] subsequently censored [0, 1] order obtain point masses boundary values 0 1.","code":"f <- bf(   score ~ x,   phi ~ x,   kappa ~ x )  m_xbx <- brm(f,   data = df, family = xbeta(), init = 0,   chains = 4, iter = 500, backend = \"cmdstanr\" )  m_xbx <- brms::add_criterion(m_xbx, \"loo\")  # For later model comparison  saveRDS(m_xbx, file = \"man/figures/m_xbx.rds\")"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"bext-model","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"BEXT Model","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"BeXt model corresponds reparametrized ordered beta model (Kubinec, 2023). Instead defining left right cutpoints, BeXt parametrization uses likelihood extreme values (0 1) balance (.e., relative proportion zeros ones).","code":"f <- bf(   score ~ x,   phi ~ x,   pex ~ x,   bex ~ x )  m_bext <- brm(f,   data = df, family = bext(), stanvars = bext_stanvars(), init = 0,   chains = 4, iter = 500, backend = \"cmdstanr\" )  m_bext <- brms::add_criterion(m_bext, \"loo\")  # For later model comparison  saveRDS(m_bext, file = \"man/figures/m_bext.rds\")"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"choco-model-1","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"CHOCO Model","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"See documentation Choice-Confidence (CHOCO).","code":"f <- bf(   score ~ x,   conf ~ x,   confleft ~ x,   prec ~ x,   precleft ~ x,   pex ~ x,   bex ~ x,   pmid = 0 )  m_choco <- brm(f,   data = df, family = choco(), stanvars = choco_stanvars(), init = 0,   chains = 4, iter = 500, backend = \"cmdstanr\" )  m_choco <- brms::add_criterion(m_choco, \"loo\")  # For later model comparison  saveRDS(m_choco, file = \"man/figures/m_choco.rds\")"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"model-comparison","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"Model Comparison","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"can compare models together using loo package, shows CHOCO provides significantly better fit models. Running posterior predictive checks allows visualize predicted distributions various models. can see typical Beta-related models fail capture bimodal nature data, well captured CHOCO model.","code":"m_zoib <- readRDS(\"man/figures/m_zoib.rds\") m_xbx <- readRDS(\"man/figures/m_xbx.rds\") m_bext <- readRDS(\"man/figures/m_bext.rds\") m_choco <- readRDS(\"man/figures/m_choco.rds\")  loo::loo_compare(m_zoib, m_xbx, m_bext, m_choco) |>    parameters(include_ENP = TRUE) # Fixed Effects  Name    |   LOOIC |   ENP |   ELPD | Difference | Difference_SE |      p ------------------------------------------------------------------------ m_choco | -739.45 | 15.02 | 369.72 |       0.00 |          0.00 |        m_zoib  | -253.28 |  8.30 | 126.64 |    -243.09 |         15.29 | < .001 m_bext  | -253.27 |  8.19 | 126.63 |    -243.09 |         15.27 | < .001 m_xbx   | -180.11 |  7.20 |  90.05 |    -279.67 |         17.21 | < .001 pred <- rbind(   estimate_prediction(m_zoib, keep_iterations = 200) |>     reshape_iterations() |>     data_modify(Model = \"ZOIB\"),   estimate_prediction(m_xbx, keep_iterations = 200) |>     reshape_iterations() |>     data_modify(Model = \"XBX\"),   estimate_prediction(m_bext, keep_iterations = 200) |>     reshape_iterations() |>     data_modify(Model = \"BEXT\"),   estimate_prediction(m_choco, keep_iterations = 200) |>     reshape_iterations() |>     data_modify(Model = \"CHOCO\") )  insight::get_data(m_zoib) |>   ggplot(aes(x = score, y = after_stat(density))) +   geom_histogram(bins = 100, fill = \"#2196F3\") +   labs(title = \"Rating Distribution\", x = \"Score\", y = \"Density\") +   theme_minimal() +    geom_histogram(     data = pred, aes(x = iter_value, group = as.factor(iter_group)),     bins = 100, alpha = 0.02, position = \"identity\", fill = \"#FF5722\"   ) +   facet_wrap(~Model)"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"effect-visualisation","dir":"","previous_headings":"Usage with brms > Subjective Ratings","what":"Effect Visualisation","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"can see predicted distribution changes function x gets “pushed” right. Moreover, can also visualize effect x specific parameters, showing mostly affects parameter conf (mean confidence - .e., central tendency - right side), confleft (relative confidence left side), mu, corresponds p probability answering right. consistent expectations, reflects larger concentrated mass right scale higher value x (brown).","code":"p1 <- modelbased::estimate_prediction(m_choco, data = \"grid\", length = 4, keep_iterations = 500) |>    reshape_iterations() |>    ggplot(aes(x = iter_value, fill = as.factor(x))) +   geom_histogram(alpha = 0.6, bins = 100, position = \"identity\") +   scale_fill_bluebrown_d() +   theme_minimal()  # Predict various parameters pred_params <- data.frame() for(param in c(\"mu\", \"conf\", \"confleft\", \"prec\", \"precleft\", \"pex\")) {   pred_params <- m_choco |>      modelbased::estimate_prediction(data = \"grid\", length = 20, predict = param) |>     as.data.frame() |>      dplyr::mutate(Parameter = param) |>  # TODO: replace by data_modify after PR     rbind(pred_params) }  p2 <- pred_params |>    ggplot(aes(x = x, y = Predicted)) +   geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill = Parameter), alpha = 0.2) +   geom_line(aes(color = Parameter), linewidth = 1) +   facet_wrap(~Parameter, scales = \"free_y\", ncol=3) +   scale_fill_viridis_d() +   scale_color_viridis_d() +   theme_minimal()  p1 / p2"},{"path":[]},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"simulate-data-1","dir":"","previous_headings":"Usage with brms > Decision Making (Choice + RT)","what":"Simulate Data","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"","code":"df <- rlnr(n = 2000, mu = 0, mudelta = 0.3, sigmazero = 1, sigmadelta = -0.5, ndt = 0.2) |>    datawizard::data_filter(rt < 5)  df |>   ggplot(aes(x = rt, fill = factor(response))) +   geom_histogram(alpha = 0.8, position = \"identity\", bins = 100) +   labs(title = \"RT Distribution\", x = \"Reaction Time\", y = \"Frequency\", fill = \"Choice\") +   theme_minimal() +   scale_fill_manual(values = c(\"#009688\", \"#E91E63\"))"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"drift-diffusion-model-ddm","dir":"","previous_headings":"Usage with brms > Decision Making (Choice + RT)","what":"Drift Diffusion Model (DDM)","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"","code":"options(mc.cores = parallel::detectCores() - 2)  f <- bf(   rt | dec(response) ~ 1,   bs ~ 1,   bias ~ 1,   ndt ~ 1 )  m_ddm <- brm(f,   data = df, family = wiener(),    init = \\() list(Intercept = 0, Intercept_bs = 0, Intercept_bias = 0, Intercept_ndt = log(0.2)),   chains = 4, iter = 500, backend = \"cmdstanr\" )  m_ddm <- brms::add_criterion(m_ddm, \"loo\")   saveRDS(m_ddm, file = \"man/figures/m_ddm.rds\") m_ddm <- readRDS(\"man/figures/m_ddm.rds\")  # parameters::parameters(m_ddm, component = \"all\")  # library(brms) # library(cmdstanr) # # m_ddm <- readRDS(url(\"https://raw.github.com/DominiqueMakowski/cogmod/main/man/figures/m_ddm.rds\")) # # m_ddm # # insight::get_predicted(m_ddm, iterations = 5, data = insight::get_data(m_ddm)[1:4,]) |> #   as.data.frame() # # brms::posterior_predict(m_ddm, ndraws=5, newdata = insight::get_data(m_ddm)[1:4,], negative_rt = TRUE)"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"lognormal-race-lnr","dir":"","previous_headings":"Usage with brms > Decision Making (Choice + RT)","what":"LogNormal Race (LNR)","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"","code":"f <- bf(   rt | dec(response) ~ 1,   confleft ~ 1,   sigmazero ~ 1,   sigmadelta ~ 1,   tau ~ 1,   minrt = min(df$rt) )  m_lnr <- brm(f,   data = df,   init = 1,   family = lnr(),   stanvars = lnr_stanvars(),   chains = 4, iter = 500, backend = \"cmdstanr\" )  m_lnr <- brms::add_criterion(m_lnr, \"loo\")  saveRDS(m_lnr, file = \"man/figures/m_lnr.rds\") # m_lnr <- readRDS(\"man/figures/m_lnr.rds\") #  # parameters::parameters(m_lnr, component = \"all\")  # library(brms) # library(cmdstanr) # # m_ddm <- readRDS(url(\"https://raw.github.com/DominiqueMakowski/cogmod/main/man/figures/m_ddm.rds\")) # # m_ddm # # insight::get_predicted(m_ddm, iterations = 5, data = insight::get_data(m_ddm)[1:4,]) |> #   as.data.frame() # # brms::posterior_predict(m_ddm, ndraws=5, newdata = insight::get_data(m_ddm)[1:4,], negative_rt = TRUE)  # d <- data.frame(rt = runif(100), response = sample(c(0, 1), 100, replace = TRUE)) # brms::make_stancode(rt ~ 1, family = brms::shifted_lognormal(), data = d) # brms::make_stancode(brms::bf( #   rt | dec(response) ~ 1, #   bs ~ 1, #   bias ~ 1, #   ndt ~ 1 # ), family = brms::wiener(), data = d) # brms::make_stancode(brms::bf( #   rt | dec(response) ~ 1, #   confleft ~ 1, #   sigmazero ~ 1, #   sigmadelta ~ 1, #   tau ~ 1 # ), family = lnr(), stanvar = lnr_stanvars(df$rt), data = df)"},{"path":"https://github.com/DominiqueMakowski/cogmod/index.html","id":"model-comparison-1","dir":"","previous_headings":"Usage with brms > Decision Making (Choice + RT)","what":"Model Comparison","title":"Cognitive Models for Subjective Scales and Decision Making Tasks in R","text":"","code":"m_ddm <- readRDS(\"man/figures/m_ddm.rds\") m_lnr <- readRDS(\"man/figures/m_lnr.rds\")  loo::loo_compare(m_ddm, m_lnr) |>    parameters::parameters() # Fixed Effects  Name  |   LOOIC |     ELPD | Difference | Difference_SE |      p ---------------------------------------------------------------- m_lnr | 5394.64 | -2697.32 |       0.00 |          0.00 |        m_ddm | 5600.12 | -2800.06 |    -102.74 |         15.27 | < .001"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta-Extreme (BEXT) Model — rbext","title":"Beta-Extreme (BEXT) Model — rbext","text":"BEXT model represents subjective ratings mixture continuous Beta distribution additional point masses extremes (0 1). structure effectively captures common patterns subjective rating data respondents often select extreme values higher rates expected Beta distribution alone. BeXt model corresponds reparametrized ordered beta model (Kubinec, 2023), introduced appropriate parsimonious way describing data commonly observed psychological science (slider scales). defined Beta distribution interval 0-1 additional point masses 0 1. differs Zero-One-Inflated Beta (ZOIB) model ZOIB model zoi coi parameters, directly controlling likelihood extreme values. Instead, BeXt uses pex bex define \"cutpoints\" extreme values become likely. ordered beta framework, boundary probabilities arise single underlying ordering process (location cutpoints latent scale). ZOIB framework, boundaries like additional mass points inserted beta distribution. ordered beta models, parameters represent coherent underlying latent process. cutpoints interact mu better represents single unified psychological process. BEXT model changes parameterization ordered beta model interpretable: Instead using fixed cutpoints, version computes cutpoints two intuitive parameters: pex (p-extreme): overall probability extreme values (0 1). bex (balance-extreme): balance extreme probability mass 0 1. parameters directly map onto expected proportion responses extremes, approach provides greater flexibility (e.g., capturing pronounced endpoints: can adapt various shapes - extreme clustering zero one) intuitive interpretability.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta-Extreme (BEXT) Model — rbext","text":"","code":"rbext(n, mu = 0.5, phi = 3, pex = 0.1, bex = 0.5)  dbext(x, mu = 0.5, phi = 3, pex = 0.1, bex = 0.5, log = FALSE)  bext_lpdf_expose()  bext_stanvars()  bext(   link_mu = \"logit\",   link_phi = \"softplus\",   link_pex = \"logit\",   link_bex = \"logit\" )  log_lik_bext(i, prep)  posterior_predict_bext(i, prep, ...)  posterior_epred_bext(prep)"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta-Extreme (BEXT) Model — rbext","text":"n Number simulated values. Must positive integer. mu Mean continuous Beta component (0 1), represents central tendency non-extreme values. phi Precision parameter (positive). Note: corresponds half \"typical\" precision parameter used Beta models (internally, precision = phi * 2 used). reparametrization means phi = 1 (mu = 0.5) corresponds uniform distribution 0 1 Beta component. facilitates usage priors (e.g., log-link, log(phi) = 0 corresponds uniform case). pex Overall probability extreme values (0 1). 0 <= pex <= 1. bex Balances extreme probability mass 0 1. bex = 0.5, mass distributed equally (P(0) = P(1) = pex / 2). bex > 0.5, mass goes 0. bex < 0.5, mass goes 1. Specifically, P(0) = pex * (1 - bex) P(1) = pex * bex. x Vector quantiles (values evaluate density). Must 0 1, inclusive. log Logical; TRUE, returns log-density. link_mu, link_phi, link_pex, link_bex Link functions parameters. , prep brms' functions run: index observation brms preparation object. ... Additional arguments.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta-Extreme (BEXT) Model — rbext","text":"vector simulated outcomes range 0-1.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beta-Extreme (BEXT) Model — rbext","text":"BeXt model corresponds reparametrized ordered beta model. Instead defining left right cutpoints directly, BeXt parametrization uses overall probability extreme values (pex) balance (bex). probability masses extremes determined : Probability mass 0: P(0) = pex * (1 - bex) Probability mass 1: P(1) = pex * bex probability value falling 0 1 (drawn Beta distribution) 1 - pex. Special cases: pex = 0: Pure Beta distribution mean mu precision phi * 2. pex = 1: Pure Bernoulli distribution P(1) = bex, P(0) = 1-bex. bex = 0 pex = 1: mass 0. bex = 1 pex = 1: mass 1. Psychological Interpretation: mu: Can interpreted underlying average tendency preference strength, disregarding extreme \"--nothing\" responses. phi: Reflects certainty consistency non-extreme responses. Higher phi indicates responses tightly clustered around mu (certainty), lower phi (especially phi = 1) suggests uniform uncertain responses. pex: Represents overall tendency towards extreme responding (choosing 0 1). reflect individual response styles (e.g., acquiescence, yea-saying/nay-saying) properties item (e.g., polarizing questions). bex: Indicates direction extreme response bias. bex > 0.5 suggests bias towards upper anchor (1), bex < 0.5 suggests bias towards lower anchor (0).","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beta-Extreme (BEXT) Model — rbext","text":"Kubinec, R. (2023). Ordered beta regression: parsimonious, well-fitting model continuous data lower upper bounds. Political Analysis, 31(4), 519-536.","code":""},{"path":[]},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rbext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta-Extreme (BEXT) Model — rbext","text":"","code":"# Simulate data with different parameterizations x <- rbext(10000, mu = 0.5, phi = 2, pex = 0, bex = 0.5) hist(x, breaks = 50, main = \"Simulated Outcomes\", xlab = \"y\")  x <- seq(0, 1, length.out = 1001) densities <- dbext(x, mu = 0.5, phi = 5, pex = 0.2, bex = 0.5) plot(x, densities, type = \"l\", main = \"Density Function\", xlab = \"y\", ylab = \"Density\")  # You can expose the lpdf function as follows: # bext_lpdf <- bext_lpdf_expose() # bext_lpdf(y = 0.5, mu = 0.6, phi = 10, pex = 0.2, bex = 0.5)  if (FALSE) { # \\dontrun{ # Default usage: family = bext() # Custom link for phi: family = bext(link_phi = \"log\") } # }"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rchoco.html","id":null,"dir":"Reference","previous_headings":"","what":"Choice-Confidence (CHOCO) Model Simulation — rchoco","title":"Choice-Confidence (CHOCO) Model Simulation — rchoco","text":"Simulates data Choice-Confidence (CHOCO) model. model useful subjective ratings (e.g., Likert-type scales) responses represent choice two underlying categories (e.g., \"disagree\" vs. \"agree\") along degree confidence intensity. CHOCO model divides response scale threshold. Responses threshold modeled mirrored Beta-Extreme (BEXT) distribution, responses threshold modeled standard BEXT distribution.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rchoco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choice-Confidence (CHOCO) Model Simulation — rchoco","text":"","code":"rchoco(   n,   p = 0.5,   conf = 0.5,   confleft = 0,   prec = 4,   precleft = 0,   pex = 0.1,   bex = 0.5,   pmid = 0,   threshold = 0.5 )  dchoco(   x,   p = 0.5,   conf = 0.5,   confleft = 0,   prec = 4,   precleft = 0,   pex = 0.1,   bex = 0.5,   pmid = 0,   threshold = 0.5,   log = FALSE )  choco_lpdf_expose()  choco_stanvars()  choco(   link_mu = \"logit\",   link_conf = \"logit\",   link_confleft = \"identity\",   link_prec = \"softplus\",   link_precleft = \"identity\",   link_pex = \"logit\",   link_bex = \"logit\",   link_pmid = \"logit\" )  log_lik_choco(i, prep)  posterior_predict_choco(i, prep, ...)  posterior_epred_choco(prep)"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rchoco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choice-Confidence (CHOCO) Model Simulation — rchoco","text":"n Number simulated trials. Must positive integer. p Proportion parameter determining balance left right sides excluding probability mass threshold (pmid). Specifically, P(Right Side | Threshold) = p P(Left Side | Threshold) = 1 - p. Must range [0, 1]. brms models, corresponds mu parameter. conf Mean parameter underlying BEXT distribution used right side (threshold 1). represents central tendency (confidence) raw BEXT component (scaling). Must strictly 0 1. mean raw BEXT component left side (muleft) derived conf applying confleft, confleft = 0 implies mirrored confidence (muleft = conf). confleft Difference parameter modifying mean left side BEXT distribution. mean raw BEXT component left side calculated muleft = inv_logit(logit(conf) + confleft). confleft = 0 implies raw mean left side right side (muleft = conf). Positive values increase muleft, resulting final CHOCO values closer 0 (higher confidence left). prec Precision parameter (phi) underlying BEXT distributions. sets base precision right side used derive left side's precision. Must positive. Note: corresponds half typical Beta precision (precision = prec * 2). prec = 1 corresponds uniform distribution (respective raw mean 0.5). precleft Difference parameter modifying precision left side BEXT distribution. precision (phi) raw BEXT component left side calculated prec_left = prec * exp(precleft). precleft = 0 implies precisions . Positive values increase precision left side. pex Overall probability extreme values (0 1) within underlying BEXT component (scaling/mirroring). applies commonly left right sides. 0 <= pex <= 1. bex Balances extreme probability mass within underlying BEXT component 0 1 anchors. P(raw=1) = pex * bex, P(raw=0) = pex * (1 - bex). Note left CHOCO component, raw=1 maps CHOCO value 0, right CHOCO component, raw=1 maps CHOCO value 1. 0 <= bex <= 1. interpretation pex bex translate final CHOCO extremes (0 1) depends internal pex_left pex_right calculations (see Details). pmid Probability mass exactly threshold. 0 <= pmid <= 1. threshold point dividing scale left right components. Must strictly 0 1. x Vector quantiles (values evaluate density). Must 0 1, inclusive. log Logical; TRUE, returns log-density. link_mu, link_conf, link_confleft, link_prec, link_precleft, link_pex, link_bex, link_pmid Link functions parameters. , prep brms' functions run: index observation brms preparation object. ... Additional arguments.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rchoco.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choice-Confidence (CHOCO) Model Simulation — rchoco","text":"simulation process involves three steps: Decide whether outcome exactly threshold (probability pmid). threshold, decide whether outcome falls right side (conditional probability p) left side (conditional probability 1-p). Simulate value corresponding BEXT distribution: Left Side (0 threshold): Calculate mu_left = inv_logit(logit(conf) + confleft) prec_left = prec * exp(precleft). effective extreme probability underlying rbext call (targeting raw value 1, maps CHOCO 0) calculated pex_left = pmin(1, pmax(0, (1 - bex) * (pex * 2))). Simulate y_raw rbext(mu=mu_left, phi=prec_left, pex=pex_left, bex=1). final value (1 - y_raw) * threshold. Right Side (threshold 1): Calculate mu_right = conf prec_right = prec. effective extreme probability underlying rbext call (targeting raw value 1, maps CHOCO 1) calculated pex_right = pmin(1, pmax(0, bex * (pex * 2))). Simulate y_raw rbext(mu=mu_right, phi=prec_right, pex=pex_right, bex=1). final value threshold + y_raw * (1 - threshold). calculation pex * 2 pex_left pex_right arises specific way rbext handles pex bex parameters simulating extremes. ensures intended proportions land CHOCO=0 CHOCO=1 based input pex bex.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rchoco.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Choice-Confidence (CHOCO) Model Simulation — rchoco","text":"Kubinec, R. (2023). Ordered beta regression: parsimonious, well-fitting model continuous data lower upper bounds. Political Analysis, 31(4), 519-536. (Describes underlying ordered beta model)","code":""},{"path":[]},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rchoco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choice-Confidence (CHOCO) Model Simulation — rchoco","text":"","code":"# Simulate data with different parameterizations # 10% at threshold, 50/50 split otherwise, symmetric confidence/precision x1 <- rchoco(n=5000, p = 0.5, conf = 0.5, confleft = 0, prec = 4,   precleft = 0, pex = 0.1, bex = 0.5, pmid = 0, threshold = 0.5) hist(x1, breaks = 50, main = \"CHOCO: Symmetric Confidence\", xlab = \"y\")   # No threshold mass, 70% probability on right, higher confidence left x2 <- rchoco(n=5000, p = 0.7, conf = 0.5, confleft = 1, prec = 3,   precleft = 1, pex = 0.05, bex = 0.7, pmid = 0, threshold = 0.5) hist(x2, breaks = 50, main = \"CHOCO: Asymmetric p, Higher Conf Left\", xlab = \"y\")   # Lower confidence overall, high probability in the middle x3 <- rchoco(n=5000, p = 0.5, conf = 0.2, confleft = 0, prec = 3,   precleft = 0, pex = 0, bex = 0.5, pmid = 0.05, threshold = 0.5) hist(x3, breaks = 50, main = \"CHOCO: Low confidence overall\", xlab = \"y\")  if (FALSE) { # \\dontrun{   # Requires cmdstanr to be installed and configured   logpdf_func <- choco_lpdf_expose()   # Note: parameter 'p' is now 'mu' in the Stan function   logpdf_func(y = 0.2, mu = 0.6, conf = 0.3, confleft = 0.1, prec = 5,               precleft = -0.2, pex = 0.1, bex = 0.5, pmid = 0.05) } # } if (FALSE) { # \\dontrun{ # Example usage in brm formula: # bf(y ~ x1 + (1|group), #    conf ~ 1, #    confleft ~ x3, #    prec ~ 1, #    precleft ~ 1, #    pex ~ s(age), #    bex ~ 1, #    pmid ~ 1, #    family = choco()) } # }"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rlnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Normal Race (LNR) Model — rlnr","title":"Log-Normal Race (LNR) Model — rlnr","text":"Log-Normal Race (LNR) model useful modeling reaction times choices decision-making tasks. model assumes choice option (accumulator) draws processing time LogNormal distribution. winning accumulator (minimum draw) determines observed reaction time choice. observed RT includes non-decision time component (tau). Functions: rlnr(): Simulates random draws LNR model. dlnr(): Computes likelihood/density observed reaction times LNR model. lnr(): Creates custom family used brms. lnr_stanvars(): brms, generates stanvars object pass brm() fitting model. posterior_predict_lnr(): brms, simulates predicted outcomes using sampled parameters. log_lik_lnr(): brms, computes log-likelihood observed data.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rlnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Normal Race (LNR) Model — rlnr","text":"","code":"rlnr(n, mu = 1, mudelta = 0, sigmazero = 1, sigmadelta = 0, ndt = 0.2)  dlnr(x, mu, mudelta, sigmazero, sigmadelta, ndt, response, log = FALSE)  lnr_lpdf_expose()  lnr_stanvars()  lnr(   link_mu = \"identity\",   link_mudelta = \"identity\",   link_sigmazero = \"softplus\",   link_sigmadelta = \"identity\",   link_tau = \"logit\",   link_minrt = \"identity\" )  log_lik_lnr(i, prep)  posterior_predict_lnr(i, prep, ...)  posterior_epred_lnr(prep)"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rlnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Normal Race (LNR) Model — rlnr","text":"n Number simulated trials. Must positive integer. mu log-space mean parameter baseline accumulator (choice 0). Controls central tendency reaction time choice 0. Can take real value, larger values leading longer RTs. Range: (-Inf, Inf). mudelta additive deviation (log-space) mean accumulator 1 (choice 1). Positive values make choice 1 slower average, negative values make faster. Can take real value. Range: (-Inf, Inf). sigmazero log-space standard deviation baseline accumulator (choice 0). Controls variability reaction times choice 0. Must positive. Larger values increase variability. Range: (0, Inf). sigmadelta log-deviation standard deviation accumulator 1. positive, accumulator 1 variability; negative, less variability compared accumulator 0. Can take real value. Range: (-Inf, Inf). ndt Non-decision time (shift parameter). Represents time taken processes unrelated decision (e.g., encoding, motor response). Must non-negative. Range: [0, Inf). x observed reaction time (RT). Must greater ndt. response decision indicator (0 1). 0 choice 0, 1 choice 1. log Logical; TRUE, returns log-density. Default: FALSE. link_mu Link function mu parameter custom family. Determines mu transformed model. Default: \"identity\". link_mudelta Link function mudelta parameter custom family. Determines mudelta transformed model. Default: \"identity\". link_sigmazero Link function sigmazero parameter custom family. Ensures sigmazero remains positive. Default: \"identity\". link_sigmadelta Link function sigmadelta parameter custom family. Determines sigmadelta transformed model. Default: \"identity\". link_tau Link function tau parameter custom family. link_minrt Link function minrt parameter custom family. , prep brms' functions run: index observation brms preparation object. ... Additional arguments.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rlnr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Normal Race (LNR) Model — rlnr","text":"","code":"# Simulate data data <- rlnr(1000, mu = 0, mudelta = 0.5, sigmazero = 1, sigmadelta = -0.5, ndt = 0.2) hist(data[data$response == 0, \"rt\"], breaks = 50, main = \"Reaction Times\", xlab = \"RT\") hist(data[data$response == 1, \"rt\"], breaks = 50, add = TRUE, col = rgb(1, 0, 0, 0.5))   # You can expose the lpdf function as follows: # lnr_lpdf <- lnr_lpdf_expose() # lnr_lpdf(Y = 0.5, mu = 0, mudelta = 0, sigmazero = 1, sigmadelta = 0.5, #          tau = 0.1, minrt = 0.2, dec = 1)"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":null,"dir":"Reference","previous_headings":"","what":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"Density, distribution function, random generation Shifted Wald distribution, also known Shifted Inverse Gaussian distribution. distribution commonly used modeling reaction times cognitive tasks. characterized drift rate (nu), decision threshold (alpha), non-decision time (ndt). Functions: rshifted_wald(): Simulates random draws Shifted Wald model. dshifted_wald(): Computes density (likelihood) Shifted Wald distribution. pshifted_wald(): Computes cumulative distribution function (CDF). qshifted_wald(): Computes quantile function (inverse CDF).","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"","code":"rshifted_wald(n, nu = 3, alpha = 0.5, ndt = 0.2)  dshifted_wald(x, nu = 3, alpha = 0.5, ndt = 0.2, log = FALSE)  shifted_wald_lpdf_expose()  shifted_wald_stanvars()  shifted_wald(   link_mu = \"log\",   link_alpha = \"log\",   link_tau = \"logit\",   link_minrt = \"identity\" )  log_lik_shifted_wald(i, prep)  posterior_predict_shifted_wald(i, prep, ...)  posterior_epred_shifted_wald(prep)"},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"n Number observations. length(n) > 1, length taken number required. nu Drift rate. Must positive. Represents average speed evidence accumulation. Range: (0, Inf). alpha Decision threshold. Must positive. Represents amount evidence needed make decision. Range: (0, Inf). ndt Non-decision time (shift parameter). Must non-negative. Represents time processes like stimulus encoding response execution. Range: [0, Inf). x Vector quantiles (observed reaction times). log Logical; TRUE, probabilities p given log(p). link_mu, link_alpha, link_tau, link_minrt Link functions. , prep brms' functions run: index observation brms preparation object. ... Additional arguments.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"rshifted_wald returns vector random deviates. dshifted_wald returns density (PDF).","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"Shifted Wald distribution describes time takes Wiener diffusion process starting 0 reach threshold alpha > 0, given positive drift rate nu > 0. resulting time shifted non-decision time ndt >= 0. distribution mathematically equivalent shifting Inverse Gaussian distribution mean mu = alpha / nu shape parameter lambda = alpha^2. , ShiftedWald(nu, alpha, ndt) = InverseGaussian(mean = alpha/nu, shape = alpha^2) + ndt. random generation algorithm implemented based method described Michael, Schucany, Haas (1976), used statmod package.","code":""},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"Michael, J. R., Schucany, W. R., & Haas, R. W. (1976). Generating Random Variates Using Transformations Multiple Roots. American Statistician, 30(2), 88–90. doi:10.2307/2683801 Anders, R., Alario, F., & Van Maanen, L. (2016). shifted Wald distribution response time data analysis. Psychological Methods, 21(3), 309–327. doi:10.1037/met0000063 Matzke, D., & Wagenmakers, E. J. (2009). Psychological interpretation ex-Gaussian shifted Wald parameters: diffusion model analysis. Psychonomic Bulletin & Review, 16(5), 798–817. doi:10.3758/PBR.16.5.798 Folks, J. L., & Chhikara, R. S. (1978). inverse Gaussian distribution statistical application—review. Journal Royal Statistical Society Series B: Statistical Methodology, 40(3), 263-275.","code":""},{"path":[]},{"path":"https://github.com/DominiqueMakowski/cogmod/reference/rshifted_wald.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shifted Wald (Shifted Inverse Gaussian) Model Functions — rshifted_wald","text":"","code":"# Simulate 1000 RTs rts <- rshifted_wald(1000, nu = 3, alpha = 0.5, ndt = 0.2) hist(rts, breaks = 50, main = \"Simulated Shifted Wald RTs\", xlab = \"Reaction Time\")   if (FALSE) { # \\dontrun{ # You can expose the lpdf function as follows: if (requireNamespace(\"cmdstanr\", quietly = TRUE)) {   sw_lpdf <- shifted_wald_lpdf_expose()   # Example call (using nu, alpha, ndt for clarity, map to mu, alpha, tau*minrt)   sw_lpdf(Y = 0.5, mu = 3, alpha = 0.5, tau = 0.5, minrt = 0.4) # ndt = 0.2 } } # } if (FALSE) { # \\dontrun{ # Example brms formula using shifted_wald family # bf(rt ~ condition + (1|subject), #    alpha ~ 1, #    tau ~ condition, #    minrt ~ 1,  # Often fixed or estimated per subject #    family = shifted_wald()) } # }"}]
